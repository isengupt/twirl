{"version":3,"sources":["Scene.js","shaders/vertex.js","shaders/fragment.js","App.js","index.js"],"names":["palette","require","Math","floor","random","Scene","props","setupResize","window","addEventListener","resize","width","container","offsetWidth","height","offsetHeight","renderer","setSize","camera","aspect","console","log","imageAspect","updateProjectionMatrix","start","bind","stop","animate","this","scene","THREE","antialias","mount","clientWidth","clientHeight","setClearColor","physicallyCorrectLights","outputEncoding","document","getElementById","appendChild","domElement","position","set","controls","OrbitControls","time","addObjects","range","min","max","material","extensions","derivatives","side","uniforms","type","value","offset","color","resolution","uvRate1","vertexShader","fragmentShader","animated","rotation","z","PI","i","level","zero","rad","spline","abs","angle","center","x","y","j","sin","cos","push","sampleClosedSpline","params","scale","extrusionSegments","radiusSegments","closed","tubeGeometry","tubeGeometry1","m","clone","m1","mesh","mesh1","add","material1","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","forEach","o","renderScene","render","id","ref","Component","App","className","href","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.c8cff1fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { vertex } from \"./shaders/vertex\";\nimport { fragment } from \"./shaders/fragment\";\n\nvar colors = require('nice-color-palettes')\n\nlet palette = colors[Math.floor(Math.random()*100)]\n\nclass Scene extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.animate = this.animate.bind(this);\n  }\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n\n    this.width = this.mount.clientWidth;\n    this.height = this.mount.clientHeight;\n    this.renderer.setClearColor(\"#000\", 1);\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.physicallyCorrectLights = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this.container = document.getElementById(\"scene\");\n\n    this.mount.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      50,\n      this.width / this.height,\n      0.01,\n      100\n    );\n\n    this.camera.position.set(0, 0, 6);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    this.time = 0;\n    this.setupResize();\n    this.addObjects();\n    this.animate();\n\n    this.resize();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        offset: { type: \"f\", value: 0 },\n        color: { type: \"v3\", value: new THREE.Color(\"#000000\") },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    this.animated = [];\n\n    function range(min, max) {\n      return min + Math.random() * (max - min);\n    }\n\n    let number = 250;\n\n    this.scene.rotation.z = Math.PI / 9;\n    for (let i = 0; i < number; i++) {\n      let precision = 100;\n      let level = range(-300, 300);\n      let zero = (level) / 300;\n      let rad = 130 * zero *zero + Math.random() * 10;\n      //let rad = 130 * (Math.sin(zero*10) + Math.sin(zero*10))+ Math.random() * 10;\n      let spline = [];\n      let offset = Math.abs(zero);\n      let angle = range(0, 2 * Math.PI);\n      let width = Math.random() * 0.5 + 0.5;\n\n      let center = {\n        x: range(-2,2),\n        y: range(-2,2)\n      }\n\n      for (let j = 0; j <= precision * width; j++) {\n        let x =  center.x + rad * Math.sin((Math.PI * 2 * j) / precision);\n        let z =  center.y + rad * Math.cos((Math.PI * 2 * j) / precision);\n\n        spline.push(new THREE.Vector3(x, level, z));\n      }\n\n      let sampleClosedSpline = new THREE.CatmullRomCurve3(spline);\n\n      let params = {\n        scale: 4,\n        extrusionSegments: 400,\n        radiusSegments: 16,\n        closed: false,\n      };\n\n      let tubeGeometry = new THREE.TubeBufferGeometry(\n        sampleClosedSpline,\n        params.extrusionSegments,\n        0.5,\n        params.radiusSegments,\n        params.closed\n      );\n      let tubeGeometry1 = new THREE.TubeBufferGeometry(\n        sampleClosedSpline,\n        params.extrusionSegments,\n        0.5 + 0.5,\n        params.radiusSegments,\n        params.closed\n      );\n\n      //this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n      let m = this.material.clone();\n      let m1 = this.material.clone();\n      //m.uniforms.color.value = new THREE.Color(\"#ffffff\");\n      m.uniforms.color.value = new THREE.Color(palette[Math.floor(Math.random()*5)])\n      m.uniforms.offset.value = offset;\n      m1.uniforms.offset.value = offset;\n      m1.side = THREE.BackSide;\n      let mesh = new THREE.Mesh(tubeGeometry, m);\n      let mesh1 = new THREE.Mesh(tubeGeometry1, m1);\n      //this.plane = new THREE.Mesh(this.geometry, this.material);\n      mesh.scale.set(0.01, 0.01, 0.01);\n      mesh1.scale.set(0.01, 0.01, 0.01);\n\n      mesh.rotation.y = mesh1.rotation.y = angle;\n\n      this.scene.add(mesh);\n      this.scene.add(mesh1);\n\n      this.animated.push({\n        mesh: mesh,\n        material: m,\n        material1: m1,\n      });\n    }\n  }\n\n  setupResize = () => {\n    window.addEventListener(\"resize\", this.resize);\n  };\n\n  resize = () => {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    console.log(\"resize\");\n\n    this.imageAspect = 853 / 1280;\n    /* \n    let a1;\n    let a2;\n\n    if (this.height / this.width > this.imageAspect) {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    } else {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    }\n\n    this.material.uniforms.resolution.value.x = this.width;\n    this.material.uniforms.resolution.value.y = this.height;\n    this.material.uniforms.resolution.value.z = a1;\n    this.material.uniforms.resolution.value.w = a2;\n\n    const dist = this.camera.position.z;\n    const height = 1;\n    this.camera.fov = 2* (180/Math.PI) * Math.atan(height/(2*dist));\n\n    if (this.width / this.height > 1) {\n      this.plane.scale.x = this.camera.aspect;\n    } else {\n      this.plane.scale.y = 1 / this.camera.aspect;\n    }  */\n\n    this.camera.updateProjectionMatrix();\n    console.log(this.camera);\n  };\n\n  componentWillUnmount() {\n    this.stop();\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId);\n  }\n\n  animate() {\n    this.time += 0.01;\n\n    this.animated.forEach((o) => {\n      o.material.uniforms.time.value = this.time;\n      o.material1.uniforms.time.value = this.time;\n    });\n\n    this.frameId = requestAnimationFrame(this.animate);\n\n    this.renderScene();\n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  render() {\n    return (\n      <div\n        id=\"scene\"\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      />\n    );\n  }\n}\n\nexport default Scene;\n","export var vertex = `\n\nvarying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\n}\n`;\n","export var fragment = `\n\nuniform float time;\nuniform float progress;\nuniform vec3 color;\nuniform float offset;\nuniform sampler2D texture1;\nuniform vec4 resolution;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nfloat PI = 3.141592653589793238;\n\nfloat qinticOut(float t) {\n  return 1.0 - (pow(t - 1.0, 5.0));\n}\nvoid main(){\n\n\n\n  float localProgress = mod(mod(time*2. ,1.) + offset*1.,1.);\n\n  localProgress = qinticOut(localProgress/2.) * 2.;\n\n  if (vUv.x > localProgress || vUv.x + 0.8 < localProgress) discard;\n  gl_FragColor = vec4(color,1.);\n  \n\n}\n`;\n","import \"./App.css\";\nimport Scene from \"./Scene\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"frame\">\n        <h1 className=\"frame__title\">Twirl</h1>\n        <div className=\"frame__links\"></div>\n        <div className=\"frame__nav\">\n          <a\n            className=\"frame__link\"\n            href=\"https://isengupt.github.io/fiber-website/\"\n          >\n            Previous\n          </a>\n          <a className=\"frame__link\" href=\"#\">\n            Resume\n          </a>\n          <a\n            className=\"frame__link\"\n            href=\"https://github.com/isengupt/twirl\"\n          >\n            GitHub\n          </a>\n        </div>\n      </div>\n      <Scene />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}